{"version":3,"sources":["icons/reload.svg","redux/reducer.js","ui/customizedComponents/styledRadio.js","ui/customizedComponents/customizedSelect.js","ui/customizedComponents/customizedCheckbox.js","ui/customizedComponents/customizedTextField.js","ui/Form.js","validation/validate.js","ui/App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","isChecked_ip_es","isChecked_dns_es","isChecked_ip_ws","isChecked_dns_ws","isWifiSecurityChecked","isWifiEnabled","reducer","state","action","type","useStyles","makeStyles","root","backgroundColor","iconRadio","borderRadius","width","height","boxShadow","backgroundImage","outline","outlineOffset","background","checkedIconRadio","display","content","opacity","disabledIconRadio","StyledRadio","props","classes","Radio","className","icon","checkedIcon","clsx","color","CustomizedRadioGroupIP","input","isChecked","children","setIsChecked","disabled","rest","RadioGroup","onChange","FormControlLabel","checked","control","value","label","CustomizedRadioGroupDNS","FormControl","select","marginLeft","borderColor","fontSize","fontFamily","fontWeight","lineHeight","marginBottom","letterSpacing","activeSelect","error","position","left","top","CustomizedSelect","meta","touched","required","event","target","iconCheckbox","checkedIconCheckbox","StyledCheckbox","Checkbox","inputProps","CustomizedCheckbox","textField","paddingLeft","CustomizedTextField","custom","TextField","variant","size","margin","fieldset1","padding","border","fieldset2","borderLeft","enabledSpan","icons","disabledSpan","gridContainer","button","buttonOutlined","buttonContained","buttonGroup","borderRight","borderBottom","textFieldWrap","flexDirection","justifyContent","alignItems","overflow","paddingBottom","legend","connectedReduxForm","connect","elemConditions","setIsChecked_ip_es","setIsChecked_dns_es","setIsChecked_ip_ws","setIsChecked_dns_ws","setIsWifiSecurityChecked","setIsWifiEnabled","handleSubmit","pristine","reset","submitting","ref1","useRef","ref2","onSubmit","noValidate","Grid","container","spacing","item","xs","FormLabel","component","Field","name","style","htmlFor","ref","current","onClick","alert","src","reload","alt","Button","reduxForm","form","validate","values","data","store","getState","errors","isEnabled","forEach","field","undefined","test","App","console","log","JSON","stringify","Boolean","window","location","hostname","match","reducers","formReducer","combinedReducers","combineReducers","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dbb0c6e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/reload.b25922a2.svg\";","const SET_IP_CHECKED_ES = 'SET_IP_CHECKED_ES/TEST_OMERTEX'\r\nconst SET_DNS_CHECKED_ES = 'SET_DNS_CHECKED_ES/TEST_OMERTEX'\r\nconst SET_IP_CHECKED_WS = 'SET_IP_CHECKED_WS/TEST_OMERTEX'\r\nconst SET_DNS_CHECKED_WS = 'SET_DNS_CHECKED_WS/TEST_OMERTEX'\r\nconst SET_WIFI_ENABLED_WS = 'SET_WIFI_ENABLED_WS/TEST_OMERTEX'\r\nconst SET_WIFI_SECURITY_CHECKED = 'SET_WIFI_SECURITY_CHECKED/TEST_OMERTEX'\r\n\r\nexport const setIsChecked_ip_es = () => ({type: SET_IP_CHECKED_ES})\r\nexport const setIsChecked_dns_es = () => ({type: SET_DNS_CHECKED_ES})\r\nexport const setIsChecked_ip_ws = () => ({type: SET_IP_CHECKED_WS})\r\nexport const setIsChecked_dns_ws = () => ({type: SET_DNS_CHECKED_WS})\r\nexport const setIsWifiSecurityChecked = () => ({type: SET_WIFI_SECURITY_CHECKED})\r\nexport const setIsWifiEnabled = () => ({type: SET_WIFI_ENABLED_WS})\r\n\r\nlet initialState = {\r\n    isChecked_ip_es: true,\r\n    isChecked_dns_es: true,\r\n    isChecked_ip_ws: true,\r\n    isChecked_dns_ws: true,\r\n    isWifiSecurityChecked: false,\r\n    isWifiEnabled: false\r\n}\r\n\r\nlet reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_IP_CHECKED_ES:\r\n            return {...state, isChecked_ip_es: !state.isChecked_ip_es}\r\n        case SET_DNS_CHECKED_ES:\r\n            return {...state, isChecked_dns_es: !state.isChecked_dns_es}\r\n        case SET_IP_CHECKED_WS:\r\n            return {...state, isChecked_ip_ws: !state.isChecked_ip_ws}\r\n        case SET_DNS_CHECKED_WS:\r\n            return {...state, isChecked_dns_ws: !state.isChecked_dns_ws}\r\n        case SET_WIFI_ENABLED_WS:\r\n            return {...state, isWifiEnabled: !state.isWifiEnabled}\r\n        case SET_WIFI_SECURITY_CHECKED:\r\n            return {...state, isWifiSecurityChecked: !state.isWifiSecurityChecked}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport default reducer","import {FormControl} from \"@material-ui/core\";\nimport {FormControlLabel} from \"@material-ui/core\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Radio from '@material-ui/core/Radio';\n\nconst useStyles = makeStyles({\n    root: {\n        '&:hover': {\n            backgroundColor: 'transparent',\n        },\n    },\n    iconRadio: {\n        borderRadius: '50%',\n        width: 16,\n        height: 16,\n        boxShadow: 'inset 0 0 0 1px rgba(16,22,26,.2), inset 0 -1px 0 rgba(16,22,26,.1)',\n        backgroundColor: '#f5f8fa',\n        backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.8),hsla(0,0%,100%,0))',\n        '$root.Mui-focusVisible &': {\n            outline: '2px auto rgba(19,124,189,.6)',\n            outlineOffset: 2,\n        },\n        'input:disabled ~ &': {\n            boxShadow: 'none',\n            background: 'rgba(206,217,224,.5)',\n        },\n    },\n    checkedIconRadio: {\n        backgroundColor: '#137cbd',\n        backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.1),hsla(0,0%,100%,0))',\n        '&:before': {\n            display: 'block',\n            width: 16,\n            height: 16,\n            backgroundImage: 'radial-gradient(#fff,#fff 28%,transparent 32%)',\n            content: '\"\"',\n        },\n        'input:disabled ~ &': {\n            boxShadow: 'none',\n            backgroundColor: '#137cbd',\n            opacity: '30%'\n        }\n    },\n    disabledIconRadio: {\n        backgroundColor: '#137cbd',\n        opacity: '60%'\n    }\n});\n\nexport const StyledRadio = (props) => {\n    const classes = useStyles();\n    return (\n        <Radio className={classes.root}\n               icon={<span className={classes.iconRadio}/>}\n               checkedIcon={<span className={clsx(classes.iconRadio, classes.checkedIconRadio)}/>}\n               color=\"default\"\n               {...props}/>\n    )\n}\n\nexport const CustomizedRadioGroupIP = ({input, children, isChecked, setIsChecked, disabled, ...rest}) => {\n    return (\n        <RadioGroup {...input} {...rest} onChange={setIsChecked}>\n            <FormControlLabel disabled={disabled}\n                              checked={isChecked}\n                              control={<StyledRadio/>}\n                              value=\"obtain an IP address automatically (DHCP/BootP)\"\n                              label=\"Obtain an IP address automatically (DHCP/BootP)\"/>\n            <FormControlLabel disabled={disabled}\n                              checked={!isChecked}\n                              control={<StyledRadio/>}\n                              value=\"use the following IP address\"\n                              label=\"Use the following IP address\"/>\n        </RadioGroup>\n    )\n}\n\nexport const CustomizedRadioGroupDNS = ({input, children, isChecked, setIsChecked, disabled, ...rest}) => {\n    return (\n        <FormControl>\n            <RadioGroup {...input} {...rest} onChange={setIsChecked}>\n                <FormControlLabel disabled={disabled}\n                                  checked={isChecked}\n                                  control={<StyledRadio/>}\n                                  value=\"obtain DNS server address automatically\"\n                                  label=\"Obtain DNS server address automatically\"/>\n                <FormControlLabel disabled={disabled}\n                                  checked={!isChecked}\n                                  control={<StyledRadio/>}\n                                  value=\"use the following DS server address\"\n                                  label=\"Use the following DS server address\"/>\n            </RadioGroup>\n        </FormControl>\n    )\n}","import ErrorIcon from '@material-ui/icons/Error';\nimport {makeStyles} from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport React from 'react';\n\nconst useStyles = makeStyles({\n    root: {\n        '&:hover': {\n            backgroundColor: 'transparent'\n        }\n    },\n    select: {\n        height: 40,\n        marginLeft: 10,\n        width: 150,\n        borderRadius: 3,\n        borderColor: '#c4c4c4',\n        fontSize: '1rem',\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        fontWeight: 400,\n        lineHeight: 1.5,\n        marginBottom: 10,\n        letterSpacing: '0.00938em'\n    },\n    activeSelect: {\n        '&:hover': {\n            borderColor: 'black'\n        }\n    },\n    error: {\n        position: 'absolute',\n        left: '10%', top: '7px',\n        color: '#bf4557',\n        fontSize: '0.8rem'\n    }\n});\n\nexport const CustomizedSelect = ({\n                                     input,\n                                     disabled,\n                                     label,\n                                     meta: {touched, error},\n                                     children, required\n                                 }) => {\n    const classes = useStyles()\n    return (\n        <>\n            <select\n                className={clsx(classes.select, !disabled && classes.activeSelect)}\n                required={required}\n                children={children}\n                disabled={disabled}\n                {...input}\n                onChange={(event, value) => {\n                    input.onChange(event.target.value)\n                }}>\n            </select>\n            {touched && ((error &&\n                <span className={classes.error}>\n                    <span>\n                        <ErrorIcon fontSize={'small'}/>\n                    </span>{error}\n                    </span>))}\n        </>\n    )\n}\n\n\n\n\n","import {Checkbox} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    root: {\n        '&:hover': {\n            backgroundColor: 'transparent',\n        },\n    },\n    iconCheckbox: {\n        borderRadius: 3,\n        width: 16,\n        height: 16,\n        boxShadow: 'inset 0 0 0 1px rgba(16,22,26,.2), inset 0 -1px 0 rgba(16,22,26,.1)',\n        backgroundColor: '#f5f8fa',\n        backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.8),hsla(0,0%,100%,0))',\n        '$root.Mui-focusVisible &': {\n            outline: '2px auto rgba(19,124,189,.6)',\n            outlineOffset: 2,\n        },\n        'input:hover ~ &': {\n            backgroundColor: '#ebf1f5',\n        },\n        'input:disabled ~ &': {\n            boxShadow: 'none',\n            background: 'rgba(206,217,224,.5)',\n        },\n    },\n    checkedIconCheckbox: {\n        backgroundColor: '#137cbd',\n        backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.1),hsla(0,0%,100%,0))',\n        '&:before': {\n            display: 'block',\n            width: 16,\n            height: 16,\n            backgroundImage:\n            \"url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath\" +\n            \" fill-rule='evenodd' clip-rule='evenodd' d='M12 5c-.28 0-.53.11-.71.29L7 9.59l-2.29-2.3a1.003 \" +\n            \"1.003 0 00-1.42 1.42l3 3c.18.18.43.29.71.29s.53-.11.71-.29l5-5A1.003 1.003 0 0012 5z' fill='%23fff'/%3E%3C/svg%3E\\\")\",\n            content: '\"\"',\n        },\n        'input:hover ~ &': {\n            backgroundColor: '#106ba3',\n        },\n    },\n});\n\nconst StyledCheckbox = (props) => {\n    const classes = useStyles();\n    return (\n        <Checkbox\n            className={classes.root}\n            color=\"default\"\n            checkedIcon={<span className={clsx(classes.iconCheckbox, classes.checkedIconCheckbox)} />}\n            icon={<span className={classes.iconCheckbox} />}\n            inputProps={{ 'aria-label': 'decorative checkbox' }}\n            {...props}\n        />\n    );\n}\n\nexport const CustomizedCheckbox = ({ input, label, isChecked, setIsChecked, disabled}) => (\n    <StyledCheckbox\n        disabled={disabled}\n        checked={input.value ? true : false}\n        onChange={input.onChange}\n    />\n)\n\n\n","import {TextField} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport React from 'react';\nimport ErrorIcon from '@material-ui/icons/Error';\n\nconst useStyles = makeStyles({\n    textField: {\n        paddingLeft: 10\n    },\n    error: {\n        position: 'absolute',\n        left: '10%', top: '5px',\n        color: '#bf4557',\n        fontSize: '0.8rem'\n    }\n});\n\nexport const CustomizedTextField = ({input, label, meta: {touched, error}, required, disabled, ...custom}) => {\n    const classes = useStyles()\n    return (<>\n            <TextField\n                className={classes.textField}\n                variant=\"outlined\"\n                size={'small'}\n                required={required}\n                disabled={disabled}\n                {...input}\n                {...custom}\n            />\n            {touched && ((error &&\n                <span className={classes.error}>\n                    <span>\n                        <ErrorIcon fontSize={'small'}/>\n                    </span>\n                    {error}\n                    </span>))\n            }\n        </>\n    )\n}\n\n\n\n","import Button from \"@material-ui/core/Button\";\nimport {FormLabel} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React, {useRef} from 'react';\nimport {connect} from \"react-redux\";\nimport {makeStyles} from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport reload from './../icons/reload.svg';\nimport {Field, reduxForm} from \"redux-form\";\nimport {\n    setIsChecked_dns_es,\n    setIsChecked_dns_ws,\n    setIsChecked_ip_es,\n    setIsChecked_ip_ws, setIsWifiEnabled,\n    setIsWifiSecurityChecked\n} from \"../redux/reducer.js\";\nimport {CustomizedRadioGroupIP, CustomizedRadioGroupDNS} from \"./customizedComponents/styledRadio.js\";\nimport {CustomizedSelect} from \"./customizedComponents/customizedSelect.js\";\nimport {CustomizedCheckbox} from \"./customizedComponents/customizedCheckbox.js\";\nimport {CustomizedTextField} from \"./customizedComponents/customizedTextField.js\";\nimport {StyledRadio} from \"./customizedComponents/styledRadio.js\";\nimport {validate} from \"../validation/validate.js\";\n\nconst useStyles = makeStyles({\n    root: {\n        margin: 10,\n        fontSize: '1rem',\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        fontWeight: 400,\n        '&:hover': {\n            backgroundColor: 'transparent',\n        }\n    },\n    fieldset1: {\n        height: 580,\n        padding: 20,\n        border: '1px grey solid'\n    },\n    fieldset2: {\n        height: 580,\n        padding: 20,\n        border: '1px grey solid',\n        borderLeft: 0\n    },\n    enabledSpan: {\n        color: 'red'\n    },\n    icons: {\n        height: 30,\n        paddingLeft: 10,\n        opacity: '60%'\n    },\n    disabledSpan: {\n        opacity: '60%'\n    },\n    gridContainer: {\n        margin: 10,\n        padding: 10,\n        border: '1px solid grey'\n    },\n    button: {\n        margin: 10,\n        width: 100,\n        borderRadius: 25\n    },\n    buttonOutlined: {\n        borderColor: '#137cbd',\n        color: '#137cbd'\n    },\n    buttonContained: {\n        backgroundColor: '#137cbd',\n        '&:hover': {\n            backgroundColor: '#106091'\n        }\n    },\n    buttonGroup: {\n        borderLeft: '1px solid grey',\n        borderRight: '1px solid grey',\n        borderBottom: '1px solid grey'\n    },\n    textFieldWrap: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        alignItems: 'flex-end',\n        overflow: 'hidden'\n    },\n    textField: {\n        position: 'relative',\n        width: 600,\n        display: 'flex',\n        justifyContent: 'flex-end',\n        alignItems: 'center',\n        paddingBottom: 5,\n        overflow: 'hidden'\n    },\n    legend: {\n        paddingBottom: 5\n    }\n})\n\nconst TestForm = (props) => {\n    const {handleSubmit, pristine, reset, submitting} = props\n    const ref1 = useRef(null);\n    const ref2 = useRef(null);\n    const {\n        setIsChecked_dns_es, setIsChecked_dns_ws, setIsChecked_ip_es, setIsChecked_ip_ws, setIsWifiEnabled,\n        setIsWifiSecurityChecked\n    } = props\n    const {\n        isChecked_ip_es, isChecked_dns_es, isChecked_ip_ws, isChecked_dns_ws,\n        isWifiSecurityChecked, isWifiEnabled\n    } = props.elemConditions\n    const classes = useStyles()\n    return (\n        <form className={classes.root} onSubmit={handleSubmit} noValidate>\n            <Grid container spacing={0}>\n                <Grid className={classes.fieldset1} item xs={6}>\n                    <FormLabel component=\"legend\"\n                               className={classes.legend}><b>Ethernet Settings</b></FormLabel>\n                    <Field name=\"IP-settings-es\"\n                           component={CustomizedRadioGroupIP}\n                           isChecked={isChecked_ip_es}\n                           setIsChecked={setIsChecked_ip_es}>\n                        <StyledRadio value=\"obtain an IP address automatically (DHCP/BootP)\"\n                                     label=\"Obtain an IP address automatically (DHCP/BootP)\"/>\n                        <StyledRadio value=\"use the following IP address\" label=\"Use the following IP address\"/>\n                    </Field>\n                    <div style={isChecked_ip_es ? {opacity: '0.6'} : null} className={classes.textFieldWrap}>\n                        <div className={classes.textField}>\n                            <label htmlFor=\"IP adress\">\n                        <span>\n                            IP Adress: <span className={classes.enabledSpan}>*</span>\n                        </span></label>\n                            <Field\n                                name=\"ipAdress-es\"\n                                component={CustomizedTextField}\n                                label=\"IP adress\"\n                                disabled={isChecked_ip_es}\n                            />\n                        </div>\n                        <div className={classes.textField}>\n                            <label htmlFor=\"Subnet Mask\">\n                        <span>\n                            Subnet Mask: <span className={classes.enabledSpan}>*</span>\n                        </span></label>\n                            <Field name=\"subnetMask-es\"\n                                   component={CustomizedTextField}\n                                   disabled={isChecked_ip_es}\n                                   label=\"Subnet Mask\"/>\n                        </div>\n                        <div className={classes.textField}>\n                            <label htmlFor=\"Default Gateway\">\n                        <span>\n                            Default Gateway:\n                        </span>\n                            </label>\n                            <Field name=\"defaultGateway-es\"\n                                   component={CustomizedTextField}\n                                   disabled={isChecked_ip_es}\n                                   label=\"Default Gateway\"/>\n                        </div>\n                    </div>\n                    <Field name=\"DNS-settings-es\"\n                           component={CustomizedRadioGroupDNS}\n                           isChecked={isChecked_dns_es}\n                           setIsChecked={setIsChecked_dns_es}>\n                        <StyledRadio value=\"obtain DNS server address automatically\"\n                                     label=\"Obtain DNS server address automatically\"/>\n                        <StyledRadio value=\"use the following DS server address\"\n                                     label=\"Use the following DS server address\"/>\n                    </Field>\n                    <div style={isChecked_dns_es ? {opacity: '0.6'} : null}\n                         className={classes.textFieldWrap}>\n                        <div className={classes.textField}>\n                            <label htmlFor=\"Preferred DNS server\">\n                        <span>\n                            Preferred DNS server: <span className={classes.enabledSpan}>*</span>\n                        </span></label>\n                            <Field name=\"preferredDNSServer-es\"\n                                   component={CustomizedTextField}\n                                   disabled={isChecked_dns_es}\n                                   label=\"Preferred DNS server\"/>\n                        </div>\n                        <div className={classes.textField}>\n                            <label htmlFor=\"Alternative DNS server\">\n                        <span>\n                            Alternative DNS server:\n                        </span></label>\n                            <Field name=\"alternativeDNSServer-es\"\n                                   component={CustomizedTextField}\n                                   disabled={isChecked_dns_es}\n                                   label=\"Alternative DNS server\"/>\n                        </div>\n                    </div>\n                </Grid>\n                <Grid className={classes.fieldset2} item xs={6}>\n                    <FormLabel component=\"legend\"\n                               className={classes.legend}><b>Wireless Settings</b></FormLabel>\n                    <div>\n                        <label htmlFor=\"Enable wifi\">\n                        <span>\n                            Enable wifi:\n                        </span>\n                            <Field name=\"enableWifi-ws\"\n                                   ref={ref1}\n                                   onChange={() => setIsWifiEnabled(!ref1.current.value)}\n                                   component={CustomizedCheckbox}\n                                   label=\"Enable wifi\"/>\n                        </label>\n                    </div>\n                    <div style={!isWifiEnabled ? {opacity: '0.6'} : null} className={classes.textFieldWrap}>\n                        <div className={classes.textField}>\n                            <label htmlFor=\"Wireless Network Name\">\n                        <span>\n                            Wireless Network Name: <span className={classes.enabledSpan}>*</span>\n                        </span></label>\n                            <Field\n                                name=\"wirelessNetworkName-ws\"\n                                component={CustomizedSelect}\n                                disabled={!isWifiEnabled}\n                                label=\"Wireless Network Name\"\n                            >\n                                <option value=\"\"/>\n                                <option value={'Boing747'}>Boing747</option>\n                                <option value={'Airbus380'}>Airbus380</option>\n                                <option value={'SuperJet'}>SuperJet</option>\n                            </Field>\n\n\n                            <span\n                                onClick={() => alert('Searching new wifi connections...')}><img\n                                src={reload}\n                                className={classes.icons}\n                                alt=\"Reload\"/></span>\n                        </div>\n                    </div>\n                    <div style={!isWifiEnabled ? {opacity: '0.6'} : null}>\n                        <label htmlFor=\"Enable wireless security\">\n                        <span>\n                           Enable wireless security:\n                        </span>\n                            <Field name=\"enableWirelessSecurity-ws\" component={CustomizedCheckbox}\n                                   ref={ref2}\n                                   onChange={() => setIsWifiSecurityChecked(!ref2.current.value)}\n                                   disabled={!isWifiEnabled}\n                                   label=\"Enable wireless security\"/>\n                        </label>\n                    </div>\n                    <div style={(!isWifiEnabled || !isWifiSecurityChecked) ? {opacity: '0.6'} : null}\n                         className={classes.textFieldWrap}>\n                        <div className={classes.textField}>\n                            <label htmlFor=\"Security Key\">\n                        <span>\n                           Security Key: <span className={classes.enabledSpan}>*</span>\n                        </span></label>\n                            <Field\n                                name=\"securitKey-ws\"\n                                component={CustomizedTextField}\n                                disabled={!isWifiSecurityChecked || !isWifiEnabled}\n                                label=\"Security Key\"\n                            />\n                        </div>\n                    </div>\n                    <Field name=\"IP-settings-ws\" component={CustomizedRadioGroupIP} isChecked={isChecked_ip_ws}\n                           setIsChecked={setIsChecked_ip_ws}\n                           disabled={!isWifiEnabled}>\n                        <StyledRadio value=\"obtain an IP address automatically (DHCP/BootP)\"\n                                     label=\"Obtain an IP address automatically (DHCP/BootP)\"/>\n                        <StyledRadio value=\"use the following IP address\" label=\"Use the following IP address\"/>\n                    </Field>\n                    <div style={(!isWifiEnabled || isChecked_ip_ws) ? {opacity: '0.6'} : null}\n                         className={classes.textFieldWrap}>\n                        <div className={classes.textField}>\n                            <label htmlFor=\"IP adress\">\n                        <span>\n                            IP Adress: <span className={classes.enabledSpan}>*</span>\n                        </span></label>\n                            <Field\n                                name=\"ipAdress-ws\"\n                                component={CustomizedTextField}\n                                disabled={isChecked_ip_ws || !isWifiEnabled}\n                                label=\"IP adress\"\n                            />\n                        </div>\n                        <div className={classes.textField}>\n                            <label htmlFor=\"Subnet Mask\">\n                        <span>\n                            Subnet Mask: <span className={classes.enabledSpan}>*</span>\n                        </span></label>\n                            <Field name=\"subnetMask-ws\"\n                                   component={CustomizedTextField}\n                                   disabled={isChecked_ip_ws || !isWifiEnabled}\n                                   label=\"Subnet Mask\"/>\n                        </div>\n                        <div className={classes.textField}>\n                            <label htmlFor=\"Default Gateway\">\n                        <span>\n                            Default Gateway:\n                        </span>\n                            </label>\n                            <Field name=\"defaultGateway-ws\"\n                                   component={CustomizedTextField}\n                                   disabled={isChecked_ip_ws || !isWifiEnabled}\n                                   label=\"Default Gateway\"/>\n                        </div>\n                    </div>\n                    <Field name=\"DNS-settings-ws\"\n                           component={CustomizedRadioGroupDNS}\n                           disabled={!isWifiEnabled}\n                           isChecked={isChecked_dns_ws}\n                           setIsChecked={setIsChecked_dns_ws}>\n                        <StyledRadio value=\"obtain DNS server address automatically\"\n                                     label=\"Obtain DNS server address automatically\"/>\n                        <StyledRadio value=\"use the following DS server address\"\n                                     label=\"Use the following DS server address\"/>\n                    </Field>\n                    <div style={(!isWifiEnabled || isChecked_dns_ws) ? {opacity: '0.6'} : null}\n                         className={classes.textFieldWrap}>\n                        <div className={classes.textField}>\n                            <label htmlFor=\"Preferred DNS server\">\n                        <span>\n                            Preferred DNS server: <span className={classes.enabledSpan}>*</span>\n                        </span></label>\n                            <Field name=\"preferredDNSServer-ws\"\n                                   component={CustomizedTextField}\n                                   disabled={isChecked_dns_ws || !isWifiEnabled}\n                                   label=\"Preferred DNS server\"/>\n                        </div>\n                        <div className={classes.textField}>\n                            <label htmlFor=\"Alternative DNS server\">\n                        <span>\n                            Alternative DNS server:\n                        </span></label>\n                            <Field name=\"alternativeDNSServer-ws\"\n                                   component={CustomizedTextField}\n                                   disabled={isChecked_dns_ws || !isWifiEnabled}\n                                   label=\"Alternative DNS server\"/>\n                        </div>\n                    </div>\n                </Grid>\n                <Grid className={classes.buttonGroup}\n                      item xs={12}>\n                    <Button className={clsx(classes.button, classes.buttonContained)}\n                            variant=\"contained\"\n                            color='primary'\n                            type=\"submit\"\n                            disabled={submitting}>\n                        Save\n                    </Button>\n                    <Button className={clsx(classes.button, classes.buttonOutlined)}\n                            variant=\"outlined\"\n                            type=\"button\"\n                            disabled={pristine || submitting}\n                            onClick={reset}>\n                        Cancel\n                    </Button>\n                </Grid>\n            </Grid>\n        </form>\n    )\n}\n\n\nconst mapDispatchToProps = (state) => ({\n    elemConditions: state.reducer\n})\n\nconst connectedReduxForm = connect(mapDispatchToProps, {\n    setIsChecked_ip_es, setIsChecked_dns_es, setIsChecked_ip_ws,\n    setIsChecked_dns_ws, setIsWifiSecurityChecked, setIsWifiEnabled\n})(TestForm)\n\nexport default reduxForm({\n    form: 'test-task-omertex',\n    validate\n})(connectedReduxForm)\n","import {store} from '../index.js'\r\n\r\nexport const validate = values => {\r\n    let data = store.getState().reducer\r\n    let errors = {}\r\n    const requiredFields = [\r\n        {\r\n            name: 'ipAdress-es',\r\n            isEnabled: !data.isChecked_ip_es\r\n        },\r\n        {\r\n            name: 'subnetMask-es',\r\n            isEnabled: !data.isChecked_ip_es\r\n        },\r\n\r\n        {\r\n            name: 'preferredDNSServer-es',\r\n            isEnabled: !data.isChecked_dns_es\r\n        },\r\n\r\n        {\r\n            name: 'subnetMask-ws',\r\n            isEnabled: !data.isChecked_ip_ws\r\n        },\r\n\r\n        {\r\n            name: 'ipAdress-ws',\r\n            isEnabled: !data.isChecked_ip_ws\r\n        },\r\n\r\n        {\r\n            name: 'preferredDNSServer-ws',\r\n            isEnabled: !data.isChecked_dns_ws\r\n        },\r\n\r\n        {\r\n            name: 'wirelessNetworkName-ws',\r\n            isEnabled: data.isWifiEnabled\r\n        },\r\n\r\n        {\r\n            name: 'securitKey-ws',\r\n            isEnabled: data.isWifiEnabled && data.isWifiSecurityChecked\r\n        }\r\n    ]\r\n\r\n    requiredFields.forEach(field => {\r\n        if (!values[field.name] && field.isEnabled) {\r\n            errors[field.name] = 'Required'\r\n        }\r\n        if (!field.isEnabled) {\r\n            errors[field.name] = undefined\r\n    }})\r\n    const validatedFields = [\r\n        'ipAdress-es',\r\n        'subnetMask-es',\r\n        'preferredDNSServer-es',\r\n        'alternativeDNSServer-es',\r\n        'ipAdress-ws',\r\n        'subnetMask-ws',\r\n        'preferredDNSServer-ws',\r\n        'alternativeDNSServer-ws'\r\n    ]\r\n    validatedFields.forEach(field => {\r\n        if (\r\n            values[field] && !/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/i.test(values[field])\r\n        ) {\r\n            errors[field] = 'Incorrected'\r\n        }\r\n    })\r\n    return errors\r\n}\r\n\r\n","import React from 'react';\nimport TestForm from './Form.js'\n\nconst App = () => {\n    const getResults = (value) => {\n        console.log(JSON.stringify(value, null, 2))\n    }\n    return (\n        <TestForm onSubmit={getResults}/>\n    )\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Provider} from \"react-redux\";\nimport App from './ui/App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, combineReducers} from 'redux';\nimport {reducer as formReducer} from 'redux-form';\nimport reducer from './redux/reducer.js';\n\nconst reducers = {\n    form: formReducer,\n    reducer: reducer\n};\nconst combinedReducers = combineReducers(reducers);\nexport const store = createStore(combinedReducers)\n\nwindow.store = store\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}